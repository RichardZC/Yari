    <div class="row">
        <div class="col m6 noprint">
            <div class="card ">
                <div class="card-content ">
                    <div class="input-field  ">
                        <i class="material-icons prefix">search</i>
                        <input v-model="search" type="search">
                        <label for="txtCodigo">Buscar Articulo</label>
                    </div>
                    <table class="table bordered highlight responsive-table">
                        <thead>
                            <tr>
                                <th>Codigo</th>
                                <th>Articulo</th>
                                <th>Precio</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="i in filtrarArticulo">
                                <td style="font-size:small;padding:0;margin:0">{{i.Codigo}}</td>
                                <td style="font-size:small;padding:0;margin:0">{{i.Nombre}}</td>
                                <td style="font-size:small;padding:0;margin:0">{{i.Venta }}</td>
                                <td style="width:25px;padding:0;margin:0"><a href="#" v-on:click="Editar(i)"><i class="material-icons">edit</i></a></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="col m6">
            <div class="center">
                <br />
                <button class="btn" v-on:click="Nuevo()">NUEVO ARTICULO</button>
            </div>
            <div class="card" v-if="mostrar">
                <form v-on:submit.prevent="Guardar()">
                    <div class="card-content">
                        <div class="input-field col m4 ">
                            <i class="material-icons prefix">person</i>
                            <input id="txtCodigo" v-model="articulo.Codigo" type="text" placeholder="Codigo">
                            <label for="txtCodigo" class="active">Codigo</label>
                        </div>
                        <div class="input-field col m8">
                            <input id="txtNombre" v-model="articulo.Nombre" type="text" required placeholder="Articulo">
                            <label for="txtNombre" class="active">Articulo</label>
                        </div>
                        <div class="input-field col m3 ">
                            <i class="material-icons prefix">vpn_key</i>
                            <input id="txtCosto" v-model="articulo.Costo" type="text" required placeholder="Costo">
                            <label for="txtCosto" class="active">Costo</label>
                        </div>
                        <div class="input-field col m3 ">
                            <input id="txtVenta" v-model="articulo.Venta" type="text" placeholder="Venta">
                            <label for="txtVenta" class="active">Venta</label>
                        </div>
                        <div class="input-field col m3 ">
                            <input id="txtStock" v-model="articulo.Stock" type="text" placeholder="Stock">
                            <label for="txtStock" class="active">Stock</label>
                        </div>
                        <div class="input-field col m3 ">
                            <input id="txtStockMin" v-model="articulo.StockMin" type="text" placeholder="Stock Minimo">
                            <label for="txtStockMin" class="active">Stock Minimo</label>
                        </div>
                        <div class="input-field col m6 ">
                            <label class="active">Marca</label>
                            <a class="btn-flat waves-effect" v-on:click="ListarMarca()" style="width:100%">
                                <i class="material-icons right">search</i> {{ articulo.NombreMarca }}
                            </a>
                        </div>
                        <div class="input-field col m6 ">
                            <label class="active">Categoria</label>
                            <a class="btn-flat waves-effect" v-on:click="ListarCategoria()" style="width:100%">
                                <i class="material-icons right">search</i> {{ articulo.NombreCategoria }}
                            </a>
                        </div>
                        <div class="row">
                            <div class="col s12 m6">
                                <input type="checkbox" v-model="articulo.Activo" class="filled-in" id="filled-in-box" checked="checked" />
                                <label for="filled-in-box">Activo</label>
                            </div>

                        </div>
                        <div class="row">
                            <div class="col m12 center">
                                <br />
                                <hr />
                                <br />
                                <input type="submit" class="btn" value="Guardar" />
                                <input type="submit" class="btn" v-on:click="mostrar=false" value="CANCELAR" />
                            </div>
                        </div>
                    </div>
                </form>
            </div>

        </div>
    </div>
<div id="modalMarca" class="modal modal-fixed-footer">
    <div class="modal-content">
        <table class="table bordered highlight responsive-table">
            <thead>
                <tr>
                    <th>Marca</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="i in marcas" :key="i.Id">
                    <td style="font-size:small;padding:0;margin:0" v-on:click="SeleccionarMarca(i)">
                    {{i.Nombre}}
                    </td>
                    <td style="width:25px;padding:0;margin:0"><a href="#" v-on:click="EditarMarca(i)"><i class="material-icons">edit</i></a></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="modal-footer">
        <a href="#!" v-on:click="NuevaMarca()" class="modal-action modal-close waves-effect waves-green btn-flat ">Nueva Marca</a>
    </div>
</div>
<div id="modalCategoria" class="modal modal-fixed-footer">
    <div class="modal-content">
        <table class="table bordered highlight responsive-table">
            <thead>
                <tr>
                    <th>Categoria</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <tr v-for="i in categorias" :key="i.Id">
                    <td style="font-size:small;padding:0;margin:0" v-on:click="SeleccionarCategoria(i)">
                        {{i.Nombre}}
                    </td>
                    <td style="width:25px;padding:0;margin:0"><a href="#" v-on:click="EditarCategoria(i)"><i class="material-icons">edit</i></a></td>
                </tr>
            </tbody>
        </table>
    </div>
    <div class="modal-footer">
        <a href="#!" v-on:click="NuevaCategoria()" class="modal-action modal-close waves-effect waves-green btn-flat ">Nueva Categoria</a>
    </div>
</div>

@section scripts{
    <script>
        $(function () {
            $("#txtStock").numeric({ decimal: false, negative: false });
            $("#txtStockMin").numeric({ decimal: false, negative: false });
            $("#txtCosto").numeric({ decimalPlaces: 2 });
            $("#txtVenta").numeric({ decimalPlaces: 2 });
        });
        var vapp = new Vue({
            el: '#content',
            data: {
                txtBuscar: "",
                articulos: [],
                articulo: {},
                
                editar: false,
                mostrar: false,
                marcas: [],
                categorias: [],
                marcaGeneral: {},
                categoriaGeneral: {},
                search: ''
            },
            created: function () {
                axios.get('@Url.Action("ListarTodoCodigo", "Articulo")' , {})
                    .then(r => {
                        this.articulos = r.data;
                    });
                axios.get('@Url.Action("ListarMarca", "Articulo")/', {})
                    .then(r => {
                        this.marcas = r.data;
                        for (var i = 0; i < this.marcas.length; i++) {
                            if (this.marcas[i].Nombre=='GENERAL') {
                                this.marcaGeneral = this.marcas[i];
                                break;
                            }
                        }                        
                    });
                axios.get('@Url.Action("ListarCategoria", "Articulo")/', {})
                    .then(r => {
                        this.categorias = r.data;
                        for (var i = 0; i < this.categorias.length; i++) {
                            if (this.categorias[i].Nombre == 'GENERAL') {
                                this.categoriaGeneral = this.categorias[i];
                                break;
                            }
                        } 
                    });
            },
            methods: {
                @*Buscar: function () {
                    if (this.txtBuscar.trim().length == 0) return;
                    axios.get('@Url.Action("Buscar", "Articulo")/' + this.txtBuscar.trim(), {})
                        .then(r => {
                            this.articulos = r.data;
                        });
                },*@
                Nuevo: function () {
                    this.articulo = {
                        Activo: true, Costo: 0, Venta: 0, Stock: 0, StockMin: 0,
                        MarcaId: this.marcaGeneral.Id,
                        NombreMarca: this.marcaGeneral.Nombre,
                        CategoriaId: this.categoriaGeneral.Id,
                        NombreCategoria: this.categoriaGeneral.Nombre
                    };
                    this.editar = false;
                    this.mostrar = true;
                },
                Editar: function (al) {
                   
                    this.articulo = Object.assign({}, al);                                     
                    this.editar = true;
                    this.mostrar = true;
                },
                Guardar: function () {                    
                    axios.post('@Url.Action("Guardar", "Articulo")', { pArticulo: this.articulo })
                        .then((r) => {
                            fn.mensaje("Articulo Guardado!");
                            this.mostrar = false;
                            this.articulo.Nombre = this.articulo.Nombre.toUpperCase();
                            this.articulo.Denominacion = this.articulo.Codigo + this.articulo.Nombre;

                            var found = false;
                            this.articulos.forEach(item => {
                                if (item.Id === this.articulo.Id) {
                                    found = true;                                       
                                    item.Codigo = this.articulo.Codigo;
                                    item.CategoriaId = this.articulo.CategoriaId;
                                    item.MarcaId = this.articulo.MarcaId;
                                    item.Costo = this.articulo.Costo;
                                    item.Denominacion = this.articulo.Denominacion;
                                    item.Nombre = this.articulo.Nombre;
                                    item.Venta = this.articulo.Venta;
                                    item.Stock = this.articulo.Stock;
                                    item.StockMin = this.articulo.StockMin;
                                    item.Activo = this.articulo.Activo;
                                }
                            });
                            if (found === false) { 
                                this.articulos.push(this.articulo); 
                            }
                        });
                },              
                ListarMarca: function () {   
                    $('#modalMarca').modal('open');                    
                },
                SeleccionarMarca: function (m) {
                    this.articulo.MarcaId = m.Id;                    
                    this.articulo.NombreMarca = m.Nombre;
                    this.$forceUpdate();
                    $('#modalMarca').modal('close');
                },
                ListarCategoria: function () {
                    $('#modalCategoria').modal('open');
                },
                SeleccionarCategoria: function (m) {
                    this.articulo.CategoriaId = m.Id;
                    this.articulo.NombreCategoria = m.Nombre;
                    this.$forceUpdate();
                    $('#modalCategoria').modal('close');
                },
                NuevaMarca: async function () {
                    const { value: texto } = await Swal.fire({
                        input: 'text',
                        inputPlaceholder: 'INGRESE NUEVA MARCA',
                        inputValidator: (value) => {
                            if (!value) {
                                return 'Ingrese un Valor!'
                            }
                        }
                    })
                    if (texto) {
                        axios.post('@Url.Action("NuevaMarca", "Articulo")', { m: { Nombre: texto } })
                            .then((m) => {                                
                                this.articulo.MarcaId = m.data.Id;
                                this.articulo.NombreMarca = m.data.Nombre;
                                this.marcas.push(m.data);
                                this.$forceUpdate();
                            });
                    }
                },
                NuevaCategoria: async function () {
                    const { value: texto } = await Swal.fire({
                        input: 'text',
                        inputPlaceholder: 'INGRESE NUEVA CATEGORIA',
                        inputValidator: (value) => {
                            if (!value) {
                                return 'Ingrese un Valor!'
                            }
                        }
                    })
                    if (texto) {
                        axios.post('@Url.Action("NuevaCategoria", "Articulo")', { m: { Nombre: texto } })
                            .then((m) => {                                
                                this.articulo.CategoriaId = m.data.Id;
                                this.articulo.NombreCategoria = m.data.Nombre;
                                this.categorias.push(m.data);
                                this.$forceUpdate();
                            });
                    }
                },
            },
        computed: {
                Total: function () {
                    var total = 0;
                    this.items.forEach(item => {
                        total += (item.Precio * item.Cantidad);
                    });
                    return total;
                },
                filtrarArticulo: function () {
                    return this.articulos.filter((a) => {
                        if (this.searchArray.length == 1) {
                            return a.Denominacion.match(this.searchArray[0])
                        } else if (this.searchArray.length == 2) {
                            return (a.Denominacion.match(this.searchArray[0])
                                && a.Denominacion.match(this.searchArray[1]))
                        } else if (this.searchArray.length == 3) {
                            return (a.Denominacion.match(this.searchArray[0])
                                && a.Denominacion.match(this.searchArray[1])
                                && a.Denominacion.match(this.searchArray[2]))
                        } else if (this.searchArray.length == 4) {
                            return (a.Denominacion.match(this.searchArray[0])
                                && a.Denominacion.match(this.searchArray[1])
                                && a.Denominacion.match(this.searchArray[2])
                                && a.Denominacion.match(this.searchArray[3]))
                        }
                    });
                },
                searchArray: function () {
                    return this.search.toUpperCase().trim().split(' ');
                }
            },
            filters: {
                Fecha: function (date) {
                    return moment(date).format('DD/MM/YYYY h:mm:ss a');
                },
                Numero: function (n) {
                    return n.toFixed(2);
                }
            },
        });
    </script>
}
