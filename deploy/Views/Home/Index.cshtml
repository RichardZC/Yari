<div class="row">
    <div class="col m5 noprint">
        <div class="card ">
            <div class="card-content ">
                <div class="input-field  ">
                    <i class="material-icons prefix">search</i>
                    <input v-model="search" type="search">
                    <label for="txtCodigo">Buscar Articulo</label>
                </div>
                <table class="table bordered highlight responsive-table">
                    <thead>
                        <tr>
                            <th>Articulo</th>
                            <th>Precio</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="i in filtrarArticulo">
                            <td style="font-size:small;padding:0;margin:0">{{i.Nombre}}</td>
                            <td style="font-size:small;padding:0;margin:0">{{i.Venta | Numero }}</td>
                            <td style="width:25px;padding:0;margin:0"><a href="#" v-on:click="AgregarVenta(i)"><i class="material-icons">add_shopping_cart</i></a></td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="col m7">
        <div class="card">
            <div class="card-content">
                <div class="input-field  ">
                    <i class="material-icons prefix">reorder</i>
                    <input v-on:keyup.13="BuscarCodigo()" v-model="codigo" id="txtCodigo" type="text" class="validate">
                    <label for="txtCodigo">Buscar Codigo</label>
                </div>
                <table class="table bordered Highlight responsive-table">
                    <thead>
                        <tr>
                            <th class="noprint">Accion</th>
                            <th>Cantidad</th>
                            <th>Articulo</th>
                            <th class="center">PU</th>
                            <th class="center">Importe</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="(i,index) in items">
                            <td class="noprint center" style="width:40px;padding:0;margin:0"><a href="#" v-on:click="Eliminar(index)"><i class="material-icons">clear</i></a></td>
                            <td class="" style="width:40px; margin:0px;padding:0px; ">
                                <div class="input-field" style="margin:0px;padding:0px">
                                    <input v-model="i.Cantidad" class="center" type="number" style="margin:0px;margin:0px">
                                </div>
                            </td>
                            <td style="font-size:small;padding:0;margin:0">{{i.Nombre}}</td>
                            <td class="center" style="padding:0;margin:0">{{i.Precio | Numero}}</td>
                            <td class="center" style="padding:0;margin:0">{{i.Cantidad * i.Precio | Numero}}</td>
                        </tr>
                        <tr v-show="items.length === 0">
                            <td colspan="5" class="center"><b>Orden de Venta Vacía</b></td>
                        </tr>
                        <tr v-show="items.length > 0" class="blue-grey">
                            <td></td>
                            <td></td>
                            <td colspan="2" class="center white-text"><b>TOTAL VENTA</b></td>
                            <td class="center white-text"><b>S/ {{Total | Numero}}</b></td>
                        </tr>
                    </tbody>
                </table>

                <div class="row noprint" v-show="items.length > 0">
                    <div class="col s4 m3 ">
                        <label>Tipo Venta</label>
                        <select class="browser-default" v-model="venta.Tipo">
                            <option value="V">NOTA DE VENTA</option>
                            <option value="B">BOLETA</option>
                            <option value="F">FACTURA</option>
                        </select>
                    </div>
                    <div class="input-field col s6 m3 ">
                        <input id="txtNumeroDoc" type="text" v-model="numeroDoc" v-on:keyup.13="BuscarCliente()" placeholder="DNI <ENTER>" maxlength="8" min="8">
                        <label for="txtNumeroDoc">DNI</label>
                    </div>
                    <div class="input-field col s6 m6 ">
                        <input id="txtCliente" type="text" v-model="cliente" placeholder="Cliente" readonly>
                        <label for="txtCliente">Cliente</label>
                    </div>
                    <div class="input-field col s12 ">
                        <a v-on:click="Imprimir()" class="btn blue btn-small "><i class="material-icons">print</i></a>
                        <a v-on:click="Limpiar()" class="btn blue-grey btn-small"><i class="material-icons left">border_bottom</i> LIMPIAR</a>
                        <a class="btn right" v-on:click="Guardar()"><i class="material-icons left">shopping_cart</i> Pagar</a>
                    </div>
                </div>

            </div>
        </div>
    </div>
    <div class="col m7 noprint">
        <div class="card ">
            <div class="card-content ">
                <span class="card-title">Ultimas Ordenes de Venta</span>
                <table class="table bordered Highlight responsive-table">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Cliente</th>
                            <th>Fecha</th>
                            <th>Numero</th>
                            <th>Total</th>
                            <th>Estado</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="(i,index) in ventas">
                            <td class="center" style="width:40px;font-size:small;padding:0;margin:0">
                                <a :href="'@Url.Action("Comprobante","Venta")' +'/'+i.Id" target="_blank"><i class="material-icons">print</i></a>
                            </td>
                            <td style="font-size:small;padding:0;margin:0">{{i.Cliente}}</td>
                            <td style="font-size:small;padding:0;margin:0">{{i.Fecha | Fecha}}</td>
                            <td style="font-size:small;padding:0;margin:0"><a href="#" v-on:click="EditarVenta(i.Id)">{{i.Serie}}-{{i.Numero }}</a> </td>
                            <td style="font-size:small;padding:0;margin:0">S/ {{i.Total | Numero}}</td>
                            <td class="left" style="font-size:small;padding:0;margin:0">
                                <a v-if="i.Estado=='P'" href="#" v-on:click="AnularVenta(i)"><span class="new badge red" data-badge-caption="x"></span></a>
                                <span v-if="i.Estado=='P'" class="new badge blue" data-badge-caption="Pag"></span>
                                <span v-if="i.Estado=='N'" class="new badge orange" data-badge-caption="Pen"></span>
                                <span v-if="i.Estado=='X'" class="new badge red" data-badge-caption="Anul"></span>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
<div id="modalCliente" class="modal modal-fixed-footer">
    <form  v-on:submit.prevent="NuevoCliente()">
        <div class="modal-content">
            <div class="row">
                <h5>Agregar Cliente</h5>
                <hr />
                <div class="input-field col s6 m2 ">
                    <input id="txtNumeroDoc1" type="text" placeholder="DNI" v-model="nuevoCliente.NumDocumento" maxlength="8" min="8" required>
                    <label for="txtNumeroDoc1">DNI*</label>
                </div>
                <div class="input-field col s5 ">
                    <input id="txtApellidos1" type="text" v-model="nuevoCliente.Apellidos" placeholder="Apellidos" required>
                    <label for="txtApellidos1">Apellidos*</label>
                </div>
                <div class="input-field col s5 ">
                    <input id="txtNombres1" type="text" v-model="nuevoCliente.Nombres" placeholder="Nombres" required>
                    <label for="txtNombres1">Nombres*</label>
                </div>
                <div class="input-field col s12 ">
                    <input id="txtDireccion1" type="text" v-model="nuevoCliente.Direccion" placeholder="Direccion">
                    <label for="txtDireccion1">Direccion</label>
                </div>
                <div class="input-field col s6 ">
                    <input id="txtCelular1" type="text" v-model="nuevoCliente.Celular" placeholder="Celular">
                    <label for="txtCelular1">Celular</label>
                </div>
                <div class="input-field col s6 ">
                    <input id="txtCorreo1" type="text" v-model="nuevoCliente.Correo" placeholder="Correo">
                    <label for="txtCorreo1">Correo</label>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="submit" class="btn">Nuevo Cliente</button>
        </div>
    </form>
</div>



@section scripts{
    <script>

        var vapp = new Vue({
            el: '#content',
            data: {
                articulos: [],
                codigo: "", 
                search: '',
                venta: {Tipo:'V'},
                items: [],
                numeroDoc: "",
                cliente: "",
                nuevoCliente: {},
                ventas: [],                
            },
            mounted: function () {
                $("#txtCodigo").focus();
                axios.get('@Url.Action("ListarTodo", "Articulo")' , {})
                    .then(r => {
                        this.articulos = r.data;
                    });
                axios.get('@Url.Action("ListarVenta10", "Venta")' , {})
                    .then(r => {
                        this.ventas = r.data;
                    });
            },
            methods: {                
                BuscarCodigo: function () {
                    var found = this.articulos.find(a => a.Codigo === this.codigo);
                    if (found) 
                        this.AgregarVenta(found);                    
                    else
                        fn.mensaje("Codigo no existe!");
                    this.codigo = "";                    
                },
                AgregarVenta: function (itemAdd) {
                    var found = false;
                    this.items.forEach(item => {
                        if (item.ArticuloId === itemAdd.Id) {
                            found = true;
                            item.Cantidad += 1;
                        }
                    });
                    if (found === false) {
                        this.items.push({ ArticuloId: itemAdd.Id, Cantidad: 1, Nombre: itemAdd.Nombre, Precio: itemAdd.Venta });
                    }
                    fn.mensaje("Artículo Agregado!");
                },
                EditarVenta: function (id) {
                    axios.get('@Url.Action("ObtenerVentaDetalle", "Venta")/' + id , {})
                        .then(r => {
                        this.items = r.data;
                    });
                },
                AnularVenta: function (venta) {
                    Swal.fire({
                        title: 'Estas tu seguro?',
                        text: "Esto Anulará la orden de venta!",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si, Anular Orden Venta',
                        cancelButtonText: 'No'
                    }).then((result) => {
                        if (result.value) {
                            axios.post('@Url.Action("AnularVenta", "Venta")', { id: venta.Id })
                                .then((r) => {
                                    venta.Estado = "X";
                                    fn.mensaje("Venta Anulada!");
                                });
                        }
                    });
                },
                Guardar: function () {
                    Swal.fire({
                        title: 'Estas tu seguro?',
                        text: "Esto creará la orden de venta!",
                        type: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Si, crear Orden Venta',
                        cancelButtonText: 'No'
                    }).then((result) => {
                        if (result.value) {
                            axios.post('@Url.Action("Guardar", "Venta")', { pVenta: this.venta, pLista: this.items })
                                .then((r) => {
                                    this.ventas.unshift(r.data);
                                    fn.mensaje("VENTA REALIZADA!!");
                                    this.Limpiar();
                                    $("#txtCodigo").focus();
                                });
                        }
                    });
                },
                Eliminar: function (index) {
                    this.items.splice(index, 1)
                },
                Imprimir: function () {
                    window.print();
                },
                Limpiar: function () {
                    this.codigo = "";
                    this.venta = { Tipo: 'V' };
                    this.items = [];
                    this.numeroDoc = "";
                    this.cliente = "";
                    $("#txtCodigo").focus();
                },
                BuscarCliente: function () {
                    axios.get('@Url.Action("ObtenerPersonaDocumento","Comun")/' + this.numeroDoc, {})
                        .then(r => {
                            if (r.data) {
                                this.venta.ClienteId = r.data.Id;
                                this.cliente = r.data.NombreCompleto;
                            }
                            else {
                                axios.get('https://py-devs.com/api/dni/' + this.numeroDoc + "/?format=json", {})
                                    .then(r => {
                                        var per = {
                                            TipoDocumento: "DNI",
                                            NumDocumento: this.numeroDoc,
                                            IndCliente: true,
                                            Apellidos: r.data.ape_paterno + " " + r.data.ape_materno,
                                            Nombres: r.data.nombres,
                                            NombreCompleto: r.data.ape_paterno + " " + r.data.ape_materno + " " + r.data.nombres
                                        }
                                        axios.post('@Url.Action("Guardar", "Persona")', { p: per })
                                            .then((r) => {
                                                this.venta.ClienteId = r.data;
                                            });
                                        this.cliente = r.data.ape_paterno + " " + r.data.ape_materno + " " + r.data.nombres;
                                    }).catch(ex => {
                                        this.nuevoCliente = { NumDocumento: this.numeroDoc };
                                        fn.mensaje("No existe DNI"); this.numeroDoc = ""; this.cliente = "";
                                        $('#modalCliente').modal('open');
                                        $("#txtApellidos1").focus();
                                    });
                            }
                        });
                },
                NuevoCliente: function () {
                    axios.post('@Url.Action("NuevoCliente", "Venta")', { pCliente: this.nuevoCliente })
                        .then((r) => {
                            this.venta.ClienteId = r.data.Id;
                            this.numeroDoc = r.data.NumDocumento;
                            this.cliente = r.data.NombreCompleto;
                            $('#modalCliente').modal('close');
                        });                
                }
            },
            computed: {
                Total: function () {
                    var total = 0;
                    this.items.forEach(item => {
                        total += (item.Precio * item.Cantidad);
                    });
                    return total;
                },
                filtrarArticulo: function () {
                    return this.articulos.filter((a) => {
                        if (this.searchArray.length == 1) {
                            return a.Nombre.match(this.searchArray[0])
                        } else if (this.searchArray.length == 2) {
                            return (a.Nombre.match(this.searchArray[0])
                                && a.Nombre.match(this.searchArray[1]))
                        } else if (this.searchArray.length == 3) {
                            return (a.Nombre.match(this.searchArray[0])
                                && a.Nombre.match(this.searchArray[1])
                                && a.Nombre.match(this.searchArray[2]))
                        } else if (this.searchArray.length == 4) {
                            return (a.Nombre.match(this.searchArray[0])
                                && a.Nombre.match(this.searchArray[1])
                                && a.Nombre.match(this.searchArray[2])
                                && a.Nombre.match(this.searchArray[3]))
                        }
                    });
                },
                searchArray: function () {
                    return this.search.toUpperCase().trim().split(' ');
                }
            },
            filters: {
                Fecha: function (date) {
                    return moment(date).format('DD/MM/YYYY h:mm:ss a');
                },
                Numero: function (n) {
                    return n.toFixed(2);
                }
            },
        });
    </script>
}